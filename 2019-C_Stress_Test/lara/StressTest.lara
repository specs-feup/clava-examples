import lara.Io;
import clava.Clava;
import lara.cmake.CMaker;

import DynamicCallGraph;

aspectdef StressTest
	input srcFoldername end


	var srcFolder = Io.getPath(Clava.getData().getContextFolder(), srcFoldername);
	var outputFolder = Io.mkdir(Clava.getData().getContextFolder(), "output");


	for(var srcFile of Io.getFiles(srcFolder, "*.c")) {
		if(srcFile.getName() !== "NAS_IS.c") {
			continue;
		}
		
		// Add program
		Clava.getProgram().addFileFromPath(srcFile);
		
		// Rebuild tree
		Clava.rebuild();

		// Graph file
		var graphFile = Io.getPath(outputFolder, Io.removeExtension(srcFile.getName()) + ".dot");

		// Apply dynamic call graph		
		call DynamicCallGraph(Io.getAbsolutePath(graphFile));


		// Compile program
		 var cmaker = new CMaker("callgraph", false);
    		 var exe = cmaker.addCurrentAst()
    		 	.setGenerator("MinGW Makefiles")
    			.setMakeCommand("mingw32-make")
    			.build();


		// Run program
		 var executor = new ProcessExecutor();
    		executor.setPrintToConsole(false)
    			.execute([exe.getAbsolutePath()]);

		// Get call graph
		println(Io.readFile(graphFile));

		// Save instrumented file
		Clava.getProgram().children[0].write(outputFolder);

		// Clean program
		Clava.getProgram().removeChildren();
	}


end
