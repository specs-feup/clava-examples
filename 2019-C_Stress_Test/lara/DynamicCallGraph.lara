import clava.ClavaJoinPoints;
import clava.Clava;
import lara.code.Logger;
import lara.util.TupleId;

/**
 * Instruments code in order to build a runtime call graph.
 *
 * Does not take into account execution when functions are called as part of a short-circuit operation
 * e.g., foo() || foo2(), in this case both calls will be counted.
 * To avoid this, the code can be transformed prior to applying this aspect.
 */
aspectdef DynamicCallGraph
	input graphFile end

	var tupleId = new TupleId();

	var dcgName = "clava_dcg_global";

    /* Instrument function calls and increment the corresponding position */
    select function.call end
    apply
		var id = tupleId.getId($function.name, $call.name);
		insertIncrement($call, dcgName + '[ '+id+' ]++;');
    end

	// Get tuples and count them
	var tuples = tupleId.getTuples();
    var total = 0;
	for(var key in tuples) {
		total++;
	}
	
    /* Declare the array in each file */
    select file.function end
    apply
        if($file.hasMain) {
            insert before 'int [[dcgName]][ [[total]] ] = {0};';
        } else {
            insert before 'extern int [[dcgName]][ [[total]] ];';
        }
        break;
    end


	// Build function to print call graph
	var callgraphFunctionName = "clava_call_graph";
	var $callgraph = ClavaJoinPoints.functionDecl(callgraphFunctionName, ClavaJoinPoints.builtinType("void"));
	$callgraph.setBody(ClavaJoinPoints.scope());
	
	// Using a comment as a marker for log insertions
	var $markerStmt = $callgraph.body.insertBegin(ClavaJoinPoints.stmtLiteral("// MARKER"));

    // Insert function before main
    select program.function{"main"} end
    apply
    		// Just before main declaration
    		if(!$function.hasDefinition) {
    			continue;
    		}
    		
 		$function.insertBefore($callgraph);

		// Insert only once
 		break;
    end

	var graphLogger = new Logger(false, graphFile);
	graphLogger.append("digraph dynamic_call_graph {")
		.ln().ln().log($markerStmt);


	var $lastStmt = graphLogger.getAfterJp();

	for(var id in tuples) {
		var tuple = tuples[id];
		
        var dcgCount = dcgName+"["+id+"]";
        $lastStmt = $lastStmt.insertAfter(ClavaJoinPoints.ifStmt(dcgCount + " != 0"));
        
        graphLogger.append("\t"+tuple[0]+" -> "+tuple[1]+' [label=\\"')
        	.int(dcgCount)
        	.append('\\"];').ln()
        	.logBefore($lastStmt.then);		
		
	}


	graphLogger.append("}").ln().log($lastStmt);

	// Remove marker stmt
	$markerStmt.detach();

	// Register function to be executed when program exits
    Clava.getProgram().atexit($callgraph);

    println('\nDynamicCallGraph done!');
	//println(Clava.getProgram().code);
end


function insertIncrement($call, code) {
	// If call is inside a loop header (e.g., for, while), 
	// insert increment at the beginning of the loop body
	if($call.isInsideLoopHeader) {
		var $loop = $call.ancestor('loop');
		checkDefined($loop);
		$loop.body.insertBegin(code);
		return;
	}

/*
	// If inside return stmt, insert increment before
	var $return = $call.ancestor('return');
	if($return !== undefined) {
		$return.insert before code;
		return;
	}
*/

	$call.insert before code;
}
		
